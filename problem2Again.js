/*
Problem
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/

// since we are computing up to four million, we don't want to use recursion as that will cause a stack overflow issue
// fib is the poster boy for recursive solutions, but we can calculate fib numbers very easily iteratively
// n = (n -1) + (n - 2)

// algorithm - as we calculate fib numbers, have a separate variable keep track of the current even terms totals. 3 variables
// the two main operations are calculating the fib numbers and looping through them to sum even terms
// storing more than the necessary fib numbers is only necessary if we want to memoize

// runtime analysis is O(n)
function sumEvenValuedFibTerms(limit) {
    let a = 1;
    let b = 2;

    let next = a + b;
    let sum = 2;

    while (next < limit) { // O (n)
        a = b;
        b = next;
        next = a + b;
        if (next % 2 === 0) {
            sum += next;
        }    
    }
    console.log(`The sum is ${sum}`);
    return sum;
}


sumEvenValuedFibTerms(4000000);




