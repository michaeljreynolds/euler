/*
Highly Divisble Triangle Number

T(n) = (n(n+1))/2 

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

// algorithm
// step1) calculate the next triangle number using the formula (n(n+1))/2
// step2) push factors of triangle number into a temp array
// step3) if temp array length > 500 return triangle number

// mmmm a true "function" heh

// runtime analysis - runs super slow when looking for 500 divisors.
// I can make the algorithm smarter by changing how much the sieve count is incremented

function t(n) {
    return (n * (n + 1))/2; 
}

function getFirstTriangleNumberAbove(numberOfDivisors) {
    
    let count = 1;    
    let divisorCount = 1;
    let triangleNumber = 1;
    let factors = [];
    let highestDivisorCount = 1;

    while (divisorCount <= numberOfDivisors) {        
        triangleNumber = t(count);        
        if (triangleNumber % 2 === 0) {
            factors = getFactors(triangleNumber);            
            divisorCount = factors.length;  
            highestDivisorCount = divisorCount > highestDivisorCount ? divisorCount : highestDivisorCount;                          
        }
        count++;
    }
    return triangleNumber;
}


function getFactors(number) {
    let factors = [];
    let start = 1;
    while (start <= number) {
        if (number % start === 0) {
            factors.push(start);
        }
        start++;
    }
    return factors;
}

function runTest(numberOfDivisors, expected) {
    let actual = getFirstTriangleNumberAbove(numberOfDivisors);
    console.log(`For first triangle number that contains more than ${numberOfDivisors} divisors is ${actual} and we expected ${expected}`);
    console.log(`Passes? ${actual === expected}`);
}

runTest(5, 28);
runTest(500, 76576500);