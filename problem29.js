/*
Distinct Powers

Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/

// algorithm
// since the ranges of a and b are high, we are going to be dealing with big numbers
// will want to use BigInt data type
// generate all combinations of a^b from a = 2 to 100 and b = 2 to 100
// add to a set
// return length of set

// runtime analysis
// double loop -> o(n^2)

// time to copmlete 11 min

function getDistinctTerms(aLimit, bLimit) {
    let hash = {};
    let distinctTerms = 0;
    for (let a = 2; a <= aLimit; a++) { // o(n)
        for (let b = 2; b <= bLimit; b++) { // o(n)
            let result = BigInt(Math.pow(a,b));
            if (hash[result.toString()] === undefined) {
                hash[result.toString()] = true;
                distinctTerms++;
            }
        }
    }
    return distinctTerms;
}

function runTest(a, b, expected) {
    let actual = getDistinctTerms(a, b);
    console.log(`For 2 <= a <= ${a} and 2 <= b <= ${b} the amount of distinct terms is ${actual} and we expected ${expected}`);
    console.log(`Passes? ${actual === expected}`);
}

runTest(5, 5, 15);
runTest(20, 20, 324);
runTest(100, 100, 9183);